{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\doctorspectra\\\\doctor-spectra-v4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\doctorspectra\\\\doctor-spectra-v4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * React Router DOM v6.14.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-router'), require('@remix-run/router')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-router', '@remix-run/router'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactRouterDOM = {}, global.React, global.ReactRouter, global.RemixRouter));\n})(this, function (exports, React, reactRouter, router) {\n  'use strict';\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function get() {\n              return e[k];\n            }\n          });\n        }\n      });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n  }\n  var React__namespace = /*#__PURE__*/_interopNamespace(React);\n  function _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n    return target;\n  }\n  var defaultMethod = \"get\";\n  var defaultEncType = \"application/x-www-form-urlencoded\";\n  function isHtmlElement(object) {\n    return object != null && typeof object.tagName === \"string\";\n  }\n  function isButtonElement(object) {\n    return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n  }\n  function isFormElement(object) {\n    return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n  }\n  function isInputElement(object) {\n    return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n  }\n  function isModifiedEvent(event) {\n    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n  }\n  function shouldProcessLinkClick(event, target) {\n    return event.button === 0 && (\n    // Ignore everything but left clicks\n    !target || target === \"_self\") &&\n    // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n    ;\n  }\n\n  /**\n   * Creates a URLSearchParams object using the given initializer.\n   *\n   * This is identical to `new URLSearchParams(init)` except it also\n   * supports arrays as values in the object form of the initializer\n   * instead of just strings. This is convenient when you need multiple\n   * values for a given key, but don't want to use an array initializer.\n   *\n   * For example, instead of:\n   *\n   *   let searchParams = new URLSearchParams([\n   *     ['sort', 'name'],\n   *     ['sort', 'price']\n   *   ]);\n   *\n   * you can do:\n   *\n   *   let searchParams = createSearchParams({\n   *     sort: ['name', 'price']\n   *   });\n   */\n  function createSearchParams(init) {\n    if (init === void 0) {\n      init = \"\";\n    }\n    return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce(function (memo, key) {\n      var value = init[key];\n      return memo.concat(Array.isArray(value) ? value.map(function (v) {\n        return [key, v];\n      }) : [[key, value]]);\n    }, []));\n  }\n  function getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n    var searchParams = createSearchParams(locationSearch);\n    if (defaultSearchParams) {\n      var _iterator = _createForOfIteratorHelper(defaultSearchParams.keys()),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var key = _step.value;\n          if (!searchParams.has(key)) {\n            defaultSearchParams.getAll(key).forEach(function (value) {\n              searchParams.append(key, value);\n            });\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return searchParams;\n  }\n\n  // Thanks https://github.com/sindresorhus/type-fest!\n\n  // One-time check for submitter support\n  var _formDataSupportsSubmitter = null;\n  function isFormDataSubmitterSupported() {\n    if (_formDataSupportsSubmitter === null) {\n      try {\n        new FormData(document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0);\n        _formDataSupportsSubmitter = false;\n      } catch (e) {\n        _formDataSupportsSubmitter = true;\n      }\n    }\n    return _formDataSupportsSubmitter;\n  }\n  var supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\n  function getFormEncType(encType) {\n    if (encType != null && !supportedFormEncTypes.has(encType)) {\n      router.UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\"));\n      return null;\n    }\n    return encType;\n  }\n  function getFormSubmissionInfo(target, basename) {\n    var method;\n    var action;\n    var encType;\n    var formData;\n    var body;\n    if (isFormElement(target)) {\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      var attr = target.getAttribute(\"action\");\n      action = attr ? router.stripBasename(attr, basename) : null;\n      method = target.getAttribute(\"method\") || defaultMethod;\n      encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n      formData = new FormData(target);\n    } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n      var form = target.form;\n      if (form == null) {\n        throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n      }\n\n      // <button>/<input type=\"submit\"> may override attributes of <form>\n\n      // When grabbing the action from the element, it will have had the basename\n      // prefixed to ensure non-JS scenarios work, so strip it since we'll\n      // re-prefix in the router\n      var _attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n      action = _attr ? router.stripBasename(_attr, basename) : null;\n      method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n      encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n\n      // Build a FormData object populated from a form and submitter\n      formData = new FormData(form, target);\n\n      // If this browser doesn't support the `FormData(el, submitter)` format,\n      // then tack on the submitter value at the end.  This is a lightweight\n      // solution that is not 100% spec compliant.  For complete support in older\n      // browsers, consider using the `formdata-submitter-polyfill` package\n      if (!isFormDataSubmitterSupported()) {\n        var name = target.name,\n          type = target.type,\n          value = target.value;\n        if (type === \"image\") {\n          var prefix = name ? name + \".\" : \"\";\n          formData.append(prefix + \"x\", \"0\");\n          formData.append(prefix + \"y\", \"0\");\n        } else if (name) {\n          formData.append(name, value);\n        }\n      }\n    } else if (isHtmlElement(target)) {\n      throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n    } else {\n      method = defaultMethod;\n      action = null;\n      encType = defaultEncType;\n      body = target;\n    }\n\n    // Send body for <Form encType=\"text/plain\" so we encode it into text\n    if (formData && encType === \"text/plain\") {\n      body = formData;\n      formData = undefined;\n    }\n    return {\n      action: action,\n      method: method.toLowerCase(),\n      encType: encType,\n      formData: formData,\n      body: body\n    };\n  }\n  var _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n    _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n    _excluded3 = [\"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"submit\", \"relative\", \"preventScrollReset\"];\n  //#endregion\n\n  ////////////////////////////////////////////////////////////////////////////////\n  //#region Routers\n  ////////////////////////////////////////////////////////////////////////////////\n  function createBrowserRouter(routes, opts) {\n    return router.createRouter({\n      basename: opts == null ? void 0 : opts.basename,\n      future: _extends({}, opts == null ? void 0 : opts.future, {\n        v7_prependBasename: true\n      }),\n      history: router.createBrowserHistory({\n        window: opts == null ? void 0 : opts.window\n      }),\n      hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n      routes: routes,\n      mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties\n    }).initialize();\n  }\n  function createHashRouter(routes, opts) {\n    return router.createRouter({\n      basename: opts == null ? void 0 : opts.basename,\n      future: _extends({}, opts == null ? void 0 : opts.future, {\n        v7_prependBasename: true\n      }),\n      history: router.createHashHistory({\n        window: opts == null ? void 0 : opts.window\n      }),\n      hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n      routes: routes,\n      mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties\n    }).initialize();\n  }\n  function parseHydrationData() {\n    var _window;\n    var state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n    if (state && state.errors) {\n      state = _extends({}, state, {\n        errors: deserializeErrors(state.errors)\n      });\n    }\n    return state;\n  }\n  function deserializeErrors(errors) {\n    if (!errors) return null;\n    var entries = Object.entries(errors);\n    var serialized = {};\n    for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n      var _entries$_i = _slicedToArray(_entries[_i], 2),\n        key = _entries$_i[0],\n        val = _entries$_i[1];\n      // Hey you!  If you change this, please change the corresponding logic in\n      // serializeErrors in react-router-dom/server.tsx :)\n      if (val && val.__type === \"RouteErrorResponse\") {\n        serialized[key] = new router.ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n      } else if (val && val.__type === \"Error\") {\n        // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n        if (val.__subType) {\n          var ErrorConstructor = window[val.__subType];\n          if (typeof ErrorConstructor === \"function\") {\n            try {\n              // @ts-expect-error\n              var error = new ErrorConstructor(val.message);\n              // Wipe away the client-side stack trace.  Nothing to fill it in with\n              // because we don't serialize SSR stack traces for security reasons\n              error.stack = \"\";\n              serialized[key] = error;\n            } catch (e) {\n              // no-op - fall through and create a normal Error\n            }\n          }\n        }\n        if (serialized[key] == null) {\n          var _error = new Error(val.message);\n          // Wipe away the client-side stack trace.  Nothing to fill it in with\n          // because we don't serialize SSR stack traces for security reasons\n          _error.stack = \"\";\n          serialized[key] = _error;\n        }\n      } else {\n        serialized[key] = val;\n      }\n    }\n    return serialized;\n  }\n\n  //#endregion\n\n  ////////////////////////////////////////////////////////////////////////////////\n  //#region Components\n  ////////////////////////////////////////////////////////////////////////////////\n\n  /**\n    Webpack + React 17 fails to compile on any of the following because webpack\n    complains that `startTransition` doesn't exist in `React`:\n    * import { startTransition } from \"react\"\n    * import * as React from from \"react\";\n      \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n    * import * as React from from \"react\";\n      \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n     Moving it to a constant such as the following solves the Webpack/React 17 issue:\n    * import * as React from from \"react\";\n      const START_TRANSITION = \"startTransition\";\n      START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n     However, that introduces webpack/terser minification issues in production builds\n    in React 18 where minification/obfuscation ends up removing the call of\n    React.startTransition entirely from the first half of the ternary.  Grabbing\n    this exported reference once up front resolves that issue.\n     See https://github.com/remix-run/react-router/issues/10579\n  */\n  var START_TRANSITION = \"startTransition\";\n  var startTransitionImpl = React__namespace[START_TRANSITION];\n  /**\n   * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n   */\n  function BrowserRouter(_ref) {\n    var basename = _ref.basename,\n      children = _ref.children,\n      future = _ref.future,\n      window = _ref.window;\n    var historyRef = React__namespace.useRef();\n    if (historyRef.current == null) {\n      historyRef.current = router.createBrowserHistory({\n        window: window,\n        v5Compat: true\n      });\n    }\n    var history = historyRef.current;\n    var _React__namespace$use = React__namespace.useState({\n        action: history.action,\n        location: history.location\n      }),\n      _React__namespace$use2 = _slicedToArray(_React__namespace$use, 2),\n      state = _React__namespace$use2[0],\n      setStateImpl = _React__namespace$use2[1];\n    var _ref9 = future || {},\n      v7_startTransition = _ref9.v7_startTransition;\n    var setState = React__namespace.useCallback(function (newState) {\n      v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n        return setStateImpl(newState);\n      }) : setStateImpl(newState);\n    }, [setStateImpl, v7_startTransition]);\n    React__namespace.useLayoutEffect(function () {\n      return history.listen(setState);\n    }, [history, setState]);\n    return /*#__PURE__*/React__namespace.createElement(reactRouter.Router, {\n      basename: basename,\n      children: children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    });\n  }\n  /**\n   * A `<Router>` for use in web browsers. Stores the location in the hash\n   * portion of the URL so it is not sent to the server.\n   */\n  function HashRouter(_ref2) {\n    var basename = _ref2.basename,\n      children = _ref2.children,\n      future = _ref2.future,\n      window = _ref2.window;\n    var historyRef = React__namespace.useRef();\n    if (historyRef.current == null) {\n      historyRef.current = router.createHashHistory({\n        window: window,\n        v5Compat: true\n      });\n    }\n    var history = historyRef.current;\n    var _React__namespace$use3 = React__namespace.useState({\n        action: history.action,\n        location: history.location\n      }),\n      _React__namespace$use4 = _slicedToArray(_React__namespace$use3, 2),\n      state = _React__namespace$use4[0],\n      setStateImpl = _React__namespace$use4[1];\n    var _ref10 = future || {},\n      v7_startTransition = _ref10.v7_startTransition;\n    var setState = React__namespace.useCallback(function (newState) {\n      v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n        return setStateImpl(newState);\n      }) : setStateImpl(newState);\n    }, [setStateImpl, v7_startTransition]);\n    React__namespace.useLayoutEffect(function () {\n      return history.listen(setState);\n    }, [history, setState]);\n    return /*#__PURE__*/React__namespace.createElement(reactRouter.Router, {\n      basename: basename,\n      children: children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    });\n  }\n  /**\n   * A `<Router>` that accepts a pre-instantiated history object. It's important\n   * to note that using your own history object is highly discouraged and may add\n   * two versions of the history library to your bundles unless you use the same\n   * version of the history library that React Router uses internally.\n   */\n  function HistoryRouter(_ref3) {\n    var basename = _ref3.basename,\n      children = _ref3.children,\n      future = _ref3.future,\n      history = _ref3.history;\n    var _React__namespace$use5 = React__namespace.useState({\n        action: history.action,\n        location: history.location\n      }),\n      _React__namespace$use6 = _slicedToArray(_React__namespace$use5, 2),\n      state = _React__namespace$use6[0],\n      setStateImpl = _React__namespace$use6[1];\n    var _ref11 = future || {},\n      v7_startTransition = _ref11.v7_startTransition;\n    var setState = React__namespace.useCallback(function (newState) {\n      v7_startTransition && startTransitionImpl ? startTransitionImpl(function () {\n        return setStateImpl(newState);\n      }) : setStateImpl(newState);\n    }, [setStateImpl, v7_startTransition]);\n    React__namespace.useLayoutEffect(function () {\n      return history.listen(setState);\n    }, [history, setState]);\n    return /*#__PURE__*/React__namespace.createElement(reactRouter.Router, {\n      basename: basename,\n      children: children,\n      location: state.location,\n      navigationType: state.action,\n      navigator: history\n    });\n  }\n  {\n    HistoryRouter.displayName = \"unstable_HistoryRouter\";\n  }\n  var isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\n  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n  /**\n   * The public API for rendering a history-aware <a>.\n   */\n  var Link = /*#__PURE__*/React__namespace.forwardRef(function LinkWithRef(_ref4, ref) {\n    var onClick = _ref4.onClick,\n      relative = _ref4.relative,\n      reloadDocument = _ref4.reloadDocument,\n      replace = _ref4.replace,\n      state = _ref4.state,\n      target = _ref4.target,\n      to = _ref4.to,\n      preventScrollReset = _ref4.preventScrollReset,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n    var _React__namespace$use7 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      basename = _React__namespace$use7.basename; // Rendered into <a href> for absolute URLs\n    var absoluteHref;\n    var isExternal = false;\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          var currentUrl = new URL(window.location.href);\n          var targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n          var path = router.stripBasename(targetUrl.pathname, basename);\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          router.UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\");\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    var href = reactRouter.useHref(to, {\n      relative: relative\n    });\n    var internalOnClick = useLinkClickHandler(to, {\n      replace: replace,\n      state: state,\n      target: target,\n      preventScrollReset: preventScrollReset,\n      relative: relative\n    });\n    function handleClick(event) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n    return /*#__PURE__*/(\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      React__namespace.createElement(\"a\", _extends({}, rest, {\n        href: absoluteHref || href,\n        onClick: isExternal || reloadDocument ? onClick : handleClick,\n        ref: ref,\n        target: target\n      }))\n    );\n  });\n  {\n    Link.displayName = \"Link\";\n  }\n  /**\n   * A <Link> wrapper that knows if it's \"active\" or not.\n   */\n  var NavLink = /*#__PURE__*/React__namespace.forwardRef(function NavLinkWithRef(_ref5, ref) {\n    var _ref5$ariaCurrent = _ref5[\"aria-current\"],\n      ariaCurrentProp = _ref5$ariaCurrent === void 0 ? \"page\" : _ref5$ariaCurrent,\n      _ref5$caseSensitive = _ref5.caseSensitive,\n      caseSensitive = _ref5$caseSensitive === void 0 ? false : _ref5$caseSensitive,\n      _ref5$className = _ref5.className,\n      classNameProp = _ref5$className === void 0 ? \"\" : _ref5$className,\n      _ref5$end = _ref5.end,\n      end = _ref5$end === void 0 ? false : _ref5$end,\n      styleProp = _ref5.style,\n      to = _ref5.to,\n      children = _ref5.children,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n    var path = reactRouter.useResolvedPath(to, {\n      relative: rest.relative\n    });\n    var location = reactRouter.useLocation();\n    var routerState = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);\n    var _React__namespace$use8 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      navigator = _React__namespace$use8.navigator;\n    var toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n    var locationPathname = location.pathname;\n    var nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n      toPathname = toPathname.toLowerCase();\n    }\n    var isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n    var isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n    var ariaCurrent = isActive ? ariaCurrentProp : undefined;\n    var className;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({\n        isActive: isActive,\n        isPending: isPending\n      });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n    }\n    var style = typeof styleProp === \"function\" ? styleProp({\n      isActive: isActive,\n      isPending: isPending\n    }) : styleProp;\n    return /*#__PURE__*/React__namespace.createElement(Link, _extends({}, rest, {\n      \"aria-current\": ariaCurrent,\n      className: className,\n      ref: ref,\n      style: style,\n      to: to\n    }), typeof children === \"function\" ? children({\n      isActive: isActive,\n      isPending: isPending\n    }) : children);\n  });\n  {\n    NavLink.displayName = \"NavLink\";\n  }\n  /**\n   * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n   * that the interaction with the server is with `fetch` instead of new document\n   * requests, allowing components to add nicer UX to the page as the form is\n   * submitted and returns with data.\n   */\n  var Form = /*#__PURE__*/React__namespace.forwardRef(function (props, ref) {\n    var submit = useSubmit();\n    return /*#__PURE__*/React__namespace.createElement(FormImpl, _extends({}, props, {\n      submit: submit,\n      ref: ref\n    }));\n  });\n  {\n    Form.displayName = \"Form\";\n  }\n  var FormImpl = /*#__PURE__*/React__namespace.forwardRef(function (_ref6, forwardedRef) {\n    var reloadDocument = _ref6.reloadDocument,\n      replace = _ref6.replace,\n      state = _ref6.state,\n      _ref6$method = _ref6.method,\n      method = _ref6$method === void 0 ? defaultMethod : _ref6$method,\n      action = _ref6.action,\n      onSubmit = _ref6.onSubmit,\n      submit = _ref6.submit,\n      relative = _ref6.relative,\n      preventScrollReset = _ref6.preventScrollReset,\n      props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n    var formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    var formAction = useFormAction(action, {\n      relative: relative\n    });\n    var submitHandler = function submitHandler(event) {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n      var submitter = event.nativeEvent.submitter;\n      var submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace: replace,\n        state: state,\n        relative: relative,\n        preventScrollReset: preventScrollReset\n      });\n    };\n    return /*#__PURE__*/React__namespace.createElement(\"form\", _extends({\n      ref: forwardedRef,\n      method: formMethod,\n      action: formAction,\n      onSubmit: reloadDocument ? onSubmit : submitHandler\n    }, props));\n  });\n  {\n    FormImpl.displayName = \"FormImpl\";\n  }\n  /**\n   * This component will emulate the browser's scroll restoration on location\n   * changes.\n   */\n  function ScrollRestoration(_ref7) {\n    var getKey = _ref7.getKey,\n      storageKey = _ref7.storageKey;\n    useScrollRestoration({\n      getKey: getKey,\n      storageKey: storageKey\n    });\n    return null;\n  }\n  {\n    ScrollRestoration.displayName = \"ScrollRestoration\";\n  }\n  //#endregion\n\n  ////////////////////////////////////////////////////////////////////////////////\n  //#region Hooks\n  ////////////////////////////////////////////////////////////////////////////////\n  var DataRouterHook;\n  (function (DataRouterHook) {\n    DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n    DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n    DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n    DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  })(DataRouterHook || (DataRouterHook = {}));\n  var DataRouterStateHook;\n  (function (DataRouterStateHook) {\n    DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n    DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  })(DataRouterStateHook || (DataRouterStateHook = {}));\n  function getDataRouterConsoleError(hookName) {\n    return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n  }\n  function useDataRouterContext(hookName) {\n    var ctx = React__namespace.useContext(reactRouter.UNSAFE_DataRouterContext);\n    !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;\n    return ctx;\n  }\n  function useDataRouterState(hookName) {\n    var state = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);\n    !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;\n    return state;\n  }\n\n  /**\n   * Handles the click behavior for router `<Link>` components. This is useful if\n   * you need to create custom `<Link>` components with the same click behavior we\n   * use in our exported `<Link>`.\n   */\n  function useLinkClickHandler(to, _temp) {\n    var _ref12 = _temp === void 0 ? {} : _temp,\n      target = _ref12.target,\n      replaceProp = _ref12.replace,\n      state = _ref12.state,\n      preventScrollReset = _ref12.preventScrollReset,\n      relative = _ref12.relative;\n    var navigate = reactRouter.useNavigate();\n    var location = reactRouter.useLocation();\n    var path = reactRouter.useResolvedPath(to, {\n      relative: relative\n    });\n    return React__namespace.useCallback(function (event) {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        var replace = replaceProp !== undefined ? replaceProp : reactRouter.createPath(location) === reactRouter.createPath(path);\n        navigate(to, {\n          replace: replace,\n          state: state,\n          preventScrollReset: preventScrollReset,\n          relative: relative\n        });\n      }\n    }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n  }\n\n  /**\n   * A convenient wrapper for reading and writing search parameters via the\n   * URLSearchParams interface.\n   */\n  function useSearchParams(defaultInit) {\n    router.UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\");\n    var defaultSearchParamsRef = React__namespace.useRef(createSearchParams(defaultInit));\n    var hasSetSearchParamsRef = React__namespace.useRef(false);\n    var location = reactRouter.useLocation();\n    var searchParams = React__namespace.useMemo(function () {\n      return (\n        // Only merge in the defaults if we haven't yet called setSearchParams.\n        // Once we call that we want those to take precedence, otherwise you can't\n        // remove a param with setSearchParams({}) if it has an initial value\n        getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)\n      );\n    }, [location.search]);\n    var navigate = reactRouter.useNavigate();\n    var setSearchParams = React__namespace.useCallback(function (nextInit, navigateOptions) {\n      var newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    }, [navigate, searchParams]);\n    return [searchParams, setSearchParams];\n  }\n\n  /**\n   * Submits a HTML `<form>` to the server without reloading the page.\n   */\n\n  /**\n   * Submits a fetcher `<form>` to the server without reloading the page.\n   */\n\n  function validateClientSideSubmission() {\n    if (typeof document === \"undefined\") {\n      throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n    }\n  }\n\n  /**\n   * Returns a function that may be used to programmatically submit a form (or\n   * some arbitrary data) to the server.\n   */\n  function useSubmit() {\n    var _useDataRouterContext = useDataRouterContext(DataRouterHook.UseSubmit),\n      router = _useDataRouterContext.router;\n    var _React__namespace$use9 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      basename = _React__namespace$use9.basename;\n    var currentRouteId = reactRouter.UNSAFE_useRouteId();\n    return React__namespace.useCallback(function (target, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      validateClientSideSubmission();\n      var _getFormSubmissionInf = getFormSubmissionInfo(target, basename),\n        action = _getFormSubmissionInf.action,\n        method = _getFormSubmissionInf.method,\n        encType = _getFormSubmissionInf.encType,\n        formData = _getFormSubmissionInf.formData,\n        body = _getFormSubmissionInf.body;\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData: formData,\n        body: body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId\n      });\n    }, [router, basename, currentRouteId]);\n  }\n\n  /**\n   * Returns the implementation for fetcher.submit\n   */\n  function useSubmitFetcher(fetcherKey, fetcherRouteId) {\n    var _useDataRouterContext2 = useDataRouterContext(DataRouterHook.UseSubmitFetcher),\n      router$1 = _useDataRouterContext2.router;\n    var _React__namespace$use10 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      basename = _React__namespace$use10.basename;\n    return React__namespace.useCallback(function (target, options) {\n      if (options === void 0) {\n        options = {};\n      }\n      validateClientSideSubmission();\n      var _getFormSubmissionInf2 = getFormSubmissionInfo(target, basename),\n        action = _getFormSubmissionInf2.action,\n        method = _getFormSubmissionInf2.method,\n        encType = _getFormSubmissionInf2.encType,\n        formData = _getFormSubmissionInf2.formData,\n        body = _getFormSubmissionInf2.body;\n      !(fetcherRouteId != null) ? router.UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : void 0;\n      router$1.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData: formData,\n        body: body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType\n      });\n    }, [router$1, basename, fetcherKey, fetcherRouteId]);\n  }\n\n  // v7: Eventually we should deprecate this entirely in favor of using the\n  // router method directly?\n  function useFormAction(action, _temp2) {\n    var _ref13 = _temp2 === void 0 ? {} : _temp2,\n      relative = _ref13.relative;\n    var _React__namespace$use11 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      basename = _React__namespace$use11.basename;\n    var routeContext = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);\n    !routeContext ? router.UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : void 0;\n    var _routeContext$matches = routeContext.matches.slice(-1),\n      _routeContext$matches2 = _slicedToArray(_routeContext$matches, 1),\n      match = _routeContext$matches2[0]; // Shallow clone path so we can modify it below, otherwise we modify the\n    // object referenced by useMemo inside useResolvedPath\n    var path = _extends({}, reactRouter.useResolvedPath(action ? action : \".\", {\n      relative: relative\n    }));\n\n    // Previously we set the default action to \".\". The problem with this is that\n    // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n    // URL. This is the intended behavior of when \".\" is specifically provided as\n    // the form action, but inconsistent w/ browsers when the action is omitted.\n    // https://github.com/remix-run/remix/issues/927\n    var location = reactRouter.useLocation();\n    if (action == null) {\n      // Safe to write to these directly here since if action was undefined, we\n      // would have called useResolvedPath(\".\") which will never include a search\n      // or hash\n      path.search = location.search;\n      path.hash = location.hash;\n\n      // When grabbing search params from the URL, remove the automatically\n      // inserted ?index param so we match the useResolvedPath search behavior\n      // which would not include ?index\n      if (match.route.index) {\n        var params = new URLSearchParams(path.search);\n        params.delete(\"index\");\n        path.search = params.toString() ? \"?\" + params.toString() : \"\";\n      }\n    }\n    if ((!action || action === \".\") && match.route.index) {\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    }\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to creating the form action.  If this is a root navigation, then just use\n    // the raw basename which allows the basename to have full control over the\n    // presence of a trailing slash on root actions\n    if (basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : router.joinPaths([basename, path.pathname]);\n    }\n    return reactRouter.createPath(path);\n  }\n  function createFetcherForm(fetcherKey, routeId) {\n    var FetcherForm = /*#__PURE__*/React__namespace.forwardRef(function (props, ref) {\n      var submit = useSubmitFetcher(fetcherKey, routeId);\n      return /*#__PURE__*/React__namespace.createElement(FormImpl, _extends({}, props, {\n        ref: ref,\n        submit: submit\n      }));\n    });\n    {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }\n  var fetcherId = 0;\n  /**\n   * Interacts with route loaders and actions without causing a navigation. Great\n   * for any interaction that stays on the same page.\n   */\n  function useFetcher() {\n    var _route$matches;\n    var _useDataRouterContext3 = useDataRouterContext(DataRouterHook.UseFetcher),\n      router$1 = _useDataRouterContext3.router;\n    var route = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);\n    !route ? router.UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : void 0;\n    var routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n    !(routeId != null) ? router.UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : void 0;\n    var _React__namespace$use12 = React__namespace.useState(function () {\n        return String(++fetcherId);\n      }),\n      _React__namespace$use13 = _slicedToArray(_React__namespace$use12, 1),\n      fetcherKey = _React__namespace$use13[0];\n    var _React__namespace$use14 = React__namespace.useState(function () {\n        !routeId ? router.UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : void 0;\n        return createFetcherForm(fetcherKey, routeId);\n      }),\n      _React__namespace$use15 = _slicedToArray(_React__namespace$use14, 1),\n      Form = _React__namespace$use15[0];\n    var _React__namespace$use16 = React__namespace.useState(function () {\n        return function (href) {\n          !router$1 ? router.UNSAFE_invariant(false, \"No router available for fetcher.load()\") : void 0;\n          !routeId ? router.UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : void 0;\n          router$1.fetch(fetcherKey, routeId, href);\n        };\n      }),\n      _React__namespace$use17 = _slicedToArray(_React__namespace$use16, 1),\n      load = _React__namespace$use17[0];\n    var submit = useSubmitFetcher(fetcherKey, routeId);\n    var fetcher = router$1.getFetcher(fetcherKey);\n    var fetcherWithComponents = React__namespace.useMemo(function () {\n      return _extends({\n        Form: Form,\n        submit: submit,\n        load: load\n      }, fetcher);\n    }, [fetcher, Form, submit, load]);\n    React__namespace.useEffect(function () {\n      // Is this busted when the React team gets real weird and calls effects\n      // twice on mount?  We really just need to garbage collect here when this\n      // fetcher is no longer around.\n      return function () {\n        if (!router$1) {\n          console.warn(\"No router available to clean up from useFetcher()\");\n          return;\n        }\n        router$1.deleteFetcher(fetcherKey);\n      };\n    }, [router$1, fetcherKey]);\n    return fetcherWithComponents;\n  }\n\n  /**\n   * Provides all fetchers currently on the page. Useful for layouts and parent\n   * routes that need to provide pending/optimistic UI regarding the fetch.\n   */\n  function useFetchers() {\n    var state = useDataRouterState(DataRouterStateHook.UseFetchers);\n    return _toConsumableArray(state.fetchers.values());\n  }\n  var SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\n  var savedScrollPositions = {};\n\n  /**\n   * When rendered inside a RouterProvider, will restore scroll positions on navigations\n   */\n  function useScrollRestoration(_temp3) {\n    var _ref14 = _temp3 === void 0 ? {} : _temp3,\n      getKey = _ref14.getKey,\n      storageKey = _ref14.storageKey;\n    var _useDataRouterContext4 = useDataRouterContext(DataRouterHook.UseScrollRestoration),\n      router$1 = _useDataRouterContext4.router;\n    var _useDataRouterState = useDataRouterState(DataRouterStateHook.UseScrollRestoration),\n      restoreScrollPosition = _useDataRouterState.restoreScrollPosition,\n      preventScrollReset = _useDataRouterState.preventScrollReset;\n    var _React__namespace$use18 = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext),\n      basename = _React__namespace$use18.basename;\n    var location = reactRouter.useLocation();\n    var matches = reactRouter.useMatches();\n    var navigation = reactRouter.useNavigation();\n\n    // Trigger manual scroll restoration while we're active\n    React__namespace.useEffect(function () {\n      window.history.scrollRestoration = \"manual\";\n      return function () {\n        window.history.scrollRestoration = \"auto\";\n      };\n    }, []);\n\n    // Save positions on pagehide\n    usePageHide(React__namespace.useCallback(function () {\n      if (navigation.state === \"idle\") {\n        var key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches]));\n\n    // Read in any saved scroll locations\n    if (typeof document !== \"undefined\") {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React__namespace.useLayoutEffect(function () {\n        try {\n          var sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n          if (sessionPositions) {\n            savedScrollPositions = JSON.parse(sessionPositions);\n          }\n        } catch (e) {\n          // no-op, use default empty object\n        }\n      }, [storageKey]);\n\n      // Enable scroll restoration in the router\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React__namespace.useLayoutEffect(function () {\n        var getKeyWithoutBasename = getKey && basename !== \"/\" ? function (location, matches) {\n          return getKey(\n          // Strip the basename to match useLocation()\n          _extends({}, location, {\n            pathname: router.stripBasename(location.pathname, basename) || location.pathname\n          }), matches);\n        } : getKey;\n        var disableScrollRestoration = router$1 == null ? void 0 : router$1.enableScrollRestoration(savedScrollPositions, function () {\n          return window.scrollY;\n        }, getKeyWithoutBasename);\n        return function () {\n          return disableScrollRestoration && disableScrollRestoration();\n        };\n      }, [router$1, basename, getKey]);\n\n      // Restore scrolling when state.restoreScrollPosition changes\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React__namespace.useLayoutEffect(function () {\n        // Explicit false means don't do anything (used for submissions)\n        if (restoreScrollPosition === false) {\n          return;\n        }\n\n        // been here before, scroll to it\n        if (typeof restoreScrollPosition === \"number\") {\n          window.scrollTo(0, restoreScrollPosition);\n          return;\n        }\n\n        // try to scroll to the hash\n        if (location.hash) {\n          var el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n          if (el) {\n            el.scrollIntoView();\n            return;\n          }\n        }\n\n        // Don't reset if this navigation opted out\n        if (preventScrollReset === true) {\n          return;\n        }\n\n        // otherwise go to the top on new locations\n        window.scrollTo(0, 0);\n      }, [location, restoreScrollPosition, preventScrollReset]);\n    }\n  }\n\n  /**\n   * Setup a callback to be fired on the window's `beforeunload` event. This is\n   * useful for saving some data to `window.localStorage` just before the page\n   * refreshes.\n   *\n   * Note: The `callback` argument should be a function created with\n   * `React.useCallback()`.\n   */\n  function useBeforeUnload(callback, options) {\n    var _ref15 = options || {},\n      capture = _ref15.capture;\n    React__namespace.useEffect(function () {\n      var opts = capture != null ? {\n        capture: capture\n      } : undefined;\n      window.addEventListener(\"beforeunload\", callback, opts);\n      return function () {\n        window.removeEventListener(\"beforeunload\", callback, opts);\n      };\n    }, [callback, capture]);\n  }\n\n  /**\n   * Setup a callback to be fired on the window's `pagehide` event. This is\n   * useful for saving some data to `window.localStorage` just before the page\n   * refreshes.  This event is better supported than beforeunload across browsers.\n   *\n   * Note: The `callback` argument should be a function created with\n   * `React.useCallback()`.\n   */\n  function usePageHide(callback, options) {\n    var _ref16 = options || {},\n      capture = _ref16.capture;\n    React__namespace.useEffect(function () {\n      var opts = capture != null ? {\n        capture: capture\n      } : undefined;\n      window.addEventListener(\"pagehide\", callback, opts);\n      return function () {\n        window.removeEventListener(\"pagehide\", callback, opts);\n      };\n    }, [callback, capture]);\n  }\n\n  /**\n   * Wrapper around useBlocker to show a window.confirm prompt to users instead\n   * of building a custom UI with useBlocker.\n   *\n   * Warning: This has *a lot of rough edges* and behaves very differently (and\n   * very incorrectly in some cases) across browsers if user click addition\n   * back/forward navigations while the confirm is open.  Use at your own risk.\n   */\n  function usePrompt(_ref8) {\n    var when = _ref8.when,\n      message = _ref8.message;\n    var blocker = reactRouter.unstable_useBlocker(when);\n    React__namespace.useEffect(function () {\n      if (blocker.state === \"blocked\" && !when) {\n        blocker.reset();\n      }\n    }, [blocker, when]);\n    React__namespace.useEffect(function () {\n      if (blocker.state === \"blocked\") {\n        var proceed = window.confirm(message);\n        if (proceed) {\n          setTimeout(blocker.proceed, 0);\n        } else {\n          blocker.reset();\n        }\n      }\n    }, [blocker, message]);\n  }\n\n  //#endregion\n\n  Object.defineProperty(exports, 'AbortedDeferredError', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.AbortedDeferredError;\n    }\n  });\n  Object.defineProperty(exports, 'Await', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Await;\n    }\n  });\n  Object.defineProperty(exports, 'MemoryRouter', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.MemoryRouter;\n    }\n  });\n  Object.defineProperty(exports, 'Navigate', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Navigate;\n    }\n  });\n  Object.defineProperty(exports, 'NavigationType', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.NavigationType;\n    }\n  });\n  Object.defineProperty(exports, 'Outlet', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Outlet;\n    }\n  });\n  Object.defineProperty(exports, 'Route', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Route;\n    }\n  });\n  Object.defineProperty(exports, 'Router', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Router;\n    }\n  });\n  Object.defineProperty(exports, 'RouterProvider', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.RouterProvider;\n    }\n  });\n  Object.defineProperty(exports, 'Routes', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.Routes;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_DataRouterContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_DataRouterContext;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_DataRouterStateContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_DataRouterStateContext;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_LocationContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_LocationContext;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_NavigationContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_NavigationContext;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_RouteContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_RouteContext;\n    }\n  });\n  Object.defineProperty(exports, 'UNSAFE_useRouteId', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.UNSAFE_useRouteId;\n    }\n  });\n  Object.defineProperty(exports, 'createMemoryRouter', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.createMemoryRouter;\n    }\n  });\n  Object.defineProperty(exports, 'createPath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.createPath;\n    }\n  });\n  Object.defineProperty(exports, 'createRoutesFromChildren', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.createRoutesFromChildren;\n    }\n  });\n  Object.defineProperty(exports, 'createRoutesFromElements', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.createRoutesFromElements;\n    }\n  });\n  Object.defineProperty(exports, 'defer', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.defer;\n    }\n  });\n  Object.defineProperty(exports, 'generatePath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.generatePath;\n    }\n  });\n  Object.defineProperty(exports, 'isRouteErrorResponse', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.isRouteErrorResponse;\n    }\n  });\n  Object.defineProperty(exports, 'json', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.json;\n    }\n  });\n  Object.defineProperty(exports, 'matchPath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.matchPath;\n    }\n  });\n  Object.defineProperty(exports, 'matchRoutes', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.matchRoutes;\n    }\n  });\n  Object.defineProperty(exports, 'parsePath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.parsePath;\n    }\n  });\n  Object.defineProperty(exports, 'redirect', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.redirect;\n    }\n  });\n  Object.defineProperty(exports, 'renderMatches', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.renderMatches;\n    }\n  });\n  Object.defineProperty(exports, 'resolvePath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.resolvePath;\n    }\n  });\n  Object.defineProperty(exports, 'unstable_useBlocker', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.unstable_useBlocker;\n    }\n  });\n  Object.defineProperty(exports, 'useActionData', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useActionData;\n    }\n  });\n  Object.defineProperty(exports, 'useAsyncError', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useAsyncError;\n    }\n  });\n  Object.defineProperty(exports, 'useAsyncValue', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useAsyncValue;\n    }\n  });\n  Object.defineProperty(exports, 'useHref', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useHref;\n    }\n  });\n  Object.defineProperty(exports, 'useInRouterContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useInRouterContext;\n    }\n  });\n  Object.defineProperty(exports, 'useLoaderData', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useLoaderData;\n    }\n  });\n  Object.defineProperty(exports, 'useLocation', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useLocation;\n    }\n  });\n  Object.defineProperty(exports, 'useMatch', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useMatch;\n    }\n  });\n  Object.defineProperty(exports, 'useMatches', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useMatches;\n    }\n  });\n  Object.defineProperty(exports, 'useNavigate', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useNavigate;\n    }\n  });\n  Object.defineProperty(exports, 'useNavigation', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useNavigation;\n    }\n  });\n  Object.defineProperty(exports, 'useNavigationType', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useNavigationType;\n    }\n  });\n  Object.defineProperty(exports, 'useOutlet', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useOutlet;\n    }\n  });\n  Object.defineProperty(exports, 'useOutletContext', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useOutletContext;\n    }\n  });\n  Object.defineProperty(exports, 'useParams', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useParams;\n    }\n  });\n  Object.defineProperty(exports, 'useResolvedPath', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useResolvedPath;\n    }\n  });\n  Object.defineProperty(exports, 'useRevalidator', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useRevalidator;\n    }\n  });\n  Object.defineProperty(exports, 'useRouteError', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useRouteError;\n    }\n  });\n  Object.defineProperty(exports, 'useRouteLoaderData', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useRouteLoaderData;\n    }\n  });\n  Object.defineProperty(exports, 'useRoutes', {\n    enumerable: true,\n    get: function get() {\n      return reactRouter.useRoutes;\n    }\n  });\n  exports.BrowserRouter = BrowserRouter;\n  exports.Form = Form;\n  exports.HashRouter = HashRouter;\n  exports.Link = Link;\n  exports.NavLink = NavLink;\n  exports.ScrollRestoration = ScrollRestoration;\n  exports.UNSAFE_useScrollRestoration = useScrollRestoration;\n  exports.createBrowserRouter = createBrowserRouter;\n  exports.createHashRouter = createHashRouter;\n  exports.createSearchParams = createSearchParams;\n  exports.unstable_HistoryRouter = HistoryRouter;\n  exports.unstable_usePrompt = usePrompt;\n  exports.useBeforeUnload = useBeforeUnload;\n  exports.useFetcher = useFetcher;\n  exports.useFetchers = useFetchers;\n  exports.useFormAction = useFormAction;\n  exports.useLinkClickHandler = useLinkClickHandler;\n  exports.useSearchParams = useSearchParams;\n  exports.useSubmit = useSubmit;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}